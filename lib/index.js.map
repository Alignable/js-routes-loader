{"version":3,"sources":["../src/index.js"],"names":["quoteArgs","args","quoted","map","param","join","buildError","error","route","JSON","stringify","checkErrors","name","path","requiredParams","optionalParams","errors","length","push","some","camelCase","str","replace","match","c","toUpperCase","transformRoute","required_params","optional_params","methods","allParams","replacedPath","reduce","replaced","regex","replacement","trasnformedRoute","method","RoutesLoader","source","cacheable","parseSource","parse","routes","forEach","t","routeErrors","requiredParamsDelimited","options","requiredParamsQuotedArgs","optionalParamsQuotedArgs","methodsQuotedArgs","Object","assign","fetch","getOptions","routePath","stringifyRequest","require","resolve","fetchWrapperPath","loader"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable camelcase */\nimport loaderUtils from 'loader-utils';\nimport { matchesRequiredParam, matchesOptionalParam, requiredParamRegex } from './PathBuilder';\n\nconst quoteArgs = (args) => {\n  const quoted = args ? args.map(param => `'${param}'`) : [];\n  return `[${quoted.join(', ')}]`;\n};\n\nconst buildError = (error, route) => `  ${JSON.stringify({ error, route })},`;\n\nconst checkErrors = (route, name, path, requiredParams, optionalParams) => {\n  const errors = [];\n\n  if (!(name && name.length > 0)) {\n    errors.push(buildError('name is required and must be a non-empty String', route));\n  }\n\n  if (!(path && path.length > 0)) {\n    errors.push(buildError('path is required and must be a non-empty String', route));\n  }\n\n  if (requiredParams && requiredParams.some(param => !matchesRequiredParam(path, param))) {\n    errors.push(buildError('path must include all the required params', route));\n  }\n\n  if (optionalParams && optionalParams.some(param => !matchesOptionalParam(path, param))) {\n    errors.push(buildError('path must include all the optional params', route));\n  }\n  return errors;\n};\n\n// Simple transform from snake_case to camelCase without pulling in some external lib\nconst camelCase = str => str.replace(/_(.)/g, (match, c) => c.toUpperCase());\n\nconst transformRoute = (route) => {\n  // json format from Rails is typically snake_case.\n  // javascript land wants camelCase so transform the name, params and path\n  const { name, path, required_params, optional_params, methods } = route;\n\n  const allParams = [...(required_params || []), ...(optional_params || [])];\n\n  const replacedPath = allParams.reduce((replaced, param) => {\n    const regex = requiredParamRegex(param);\n    const replacement = `$1${camelCase(param)}`;\n    return replaced.replace(regex, replacement);\n  }, path);\n\n  const trasnformedRoute = {\n    name: (typeof name === 'string') && camelCase(name),\n    path: replacedPath,\n    requiredParams: required_params && required_params.map(camelCase),\n    optionalParams: optional_params && optional_params.map(camelCase),\n    methods: methods && methods.map(method => method.toUpperCase()),\n  };\n  return trasnformedRoute;\n};\n\nfunction RoutesLoader(source) {\n  this.cacheable();\n\n  const parseSource = JSON.parse(source);\n\n  const routes = [];\n  const errors = [];\n\n  parseSource.routes.forEach((route) => {\n    const t = transformRoute(route);\n    const { name, path, requiredParams, optionalParams, methods } = t;\n\n    const routeErrors = checkErrors(route, name, path, requiredParams, optionalParams);\n    if (routeErrors.length > 0) {\n      errors.push(...routeErrors);\n      return;\n    }\n\n    const requiredParamsDelimited = requiredParams ? requiredParams.join(', ') : '';\n    const options = requiredParams && requiredParams.length > 0 ? ', options' : 'options';\n    const requiredParamsQuotedArgs = quoteArgs(requiredParams);\n    const optionalParamsQuotedArgs = quoteArgs(optionalParams);\n    const methodsQuotedArgs = quoteArgs(methods);\n\n    routes.push(`  ${name}: (${requiredParamsDelimited}${options}) => new Route(\n    '${path}',\n    [${requiredParamsDelimited}],\n    ${requiredParamsQuotedArgs},\n    ${optionalParamsQuotedArgs},\n    options,\n    ${methodsQuotedArgs},\n    fetchWrapper\n  ),`);\n  });\n\n  const options = Object.assign(\n    {},\n    { fetch: './simpleFetch' },\n    loaderUtils.getOptions(this));\n\n  const routePath = loaderUtils.stringifyRequest(this, `${require.resolve('./Route.js')}`);\n  const fetchWrapperPath = loaderUtils.stringifyRequest(this, `!${require.resolve(options.fetch)}`);\n\n  const loader =\n`import Route from ${routePath};\nimport fetchWrapper from ${fetchWrapperPath};\n    \nconst errors = [\n${errors.join('\\n')}\n];\n\nconst routes = {\n${routes.join('\\n')}\n};\n\nexport { errors, routes as default };\n`;\n\n  return loader;\n}\n\nexport default RoutesLoader;\n"]}