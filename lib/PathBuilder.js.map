{"version":3,"sources":["../src/PathBuilder.js"],"names":["globParamRegex","RegExp","param","globParamReplace","value","isGlob","isArray","Array","Error","join","requiredParamRegex","requiredParamReplace","optionalParamRegex","optionalParamReplace","matchesRequiredParam","path","match","matchesOptionalParam","matchesGlobParam","replaceRequiredParam","regex","replacement","replace","replaceOptionalParam","checkErrors","params","requiredParams","options","error","Object","forEach","replaceRequiredParams","reduce","replacedPath","i","replaceOptionalParams","optionalParams","paramValue","addQueryStringParams","anchor","pathWithQueryString","query","stringify","length","encodeURIComponent","buildPath","pathSpec","opts"],"mappings":"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","file":"PathBuilder.js","sourcesContent":["import querystring from 'querystring';\n\nconst globParamRegex = param => new RegExp(`\\\\*${param}`);\nconst globParamReplace = (value, isGlob) => {\n  const isArray = value instanceof Array;\n  if (!isGlob && isArray) {\n    throw new Error('Tried to pass an array to a parameter that is not a glob.');\n  }\n  if (!isGlob || !isArray) {\n    return value;\n  }\n  return value.join('/');\n};\n\nconst requiredParamRegex = param => new RegExp(`([:\\\\*])${param}`);\nconst requiredParamReplace = (value, isGlob) => globParamReplace(value, isGlob);\n\nconst optionalParamRegex = param => new RegExp(`\\\\(([^\\\\(\\\\)].*)[:\\\\*]${param}([^\\\\(\\\\)]*)\\\\)`);\nconst optionalParamReplace = (value, isGlob) => (typeof value !== 'undefined' ? `$1${globParamReplace(value, isGlob)}$2` : '');\n\nconst matchesRequiredParam = (path, param) => path.match(requiredParamRegex(param));\nconst matchesOptionalParam = (path, param) => path.match(optionalParamRegex(param));\nconst matchesGlobParam = (path, param) => path.match(globParamRegex(param));\n\nconst replaceRequiredParam = (path, param, value) => {\n  const isGlob = matchesGlobParam(path, param);\n  const regex = requiredParamRegex(param);\n  const replacement = requiredParamReplace(value, isGlob);\n  return path.replace(regex, replacement);\n};\n\nconst replaceOptionalParam = (path, param, value) => {\n  const isGlob = matchesGlobParam(path, param);\n  const regex = optionalParamRegex(param);\n  const replacement = optionalParamReplace(value, isGlob);\n  return path.replace(regex, replacement);\n};\n\nconst checkErrors = (params, requiredParams, options) => {\n  let error;\n  if (!(options instanceof Object && !(options instanceof Array))) {\n    error = 'too many parameters';\n  } else {\n    params.forEach((param) => {\n      if (typeof param === 'undefined' || (param instanceof Object && !(param instanceof Array))) {\n        error = 'too few parameters';\n      }\n    });\n  }\n  if (error) {\n    throw new Error(`Required Parameters mismatch - ${error}. Required parameters are [${requiredParams}] but received [${params}].`);\n  }\n};\n\nconst replaceRequiredParams = (path, requiredParams, params) =>\n  requiredParams.reduce((replacedPath, param, i) => replaceRequiredParam(replacedPath, param, params[i]), path);\n\nconst replaceOptionalParams = (path, optionalParams, options) =>\n  optionalParams.reduce((replacedPath, param) => {\n    const paramValue = options[param];\n    delete options[param]; // eslint-disable-line no-param-reassign\n\n    return replaceOptionalParam(replacedPath, param, paramValue);\n  }, path);\n\nconst addQueryStringParams = (path, options, anchor) => {\n  let pathWithQueryString = path;\n\n  const query = querystring.stringify(options);\n  if (query.length > 0) {\n    pathWithQueryString = `${pathWithQueryString}?${query}`;\n  }\n  if (typeof anchor !== 'undefined') {\n    pathWithQueryString = `${pathWithQueryString}#${encodeURIComponent(anchor)}`;\n  }\n  return pathWithQueryString;\n};\n\nconst buildPath = (pathSpec, params, requiredParams, optionalParams, opts) => {\n  const options = opts || {};\n\n  checkErrors(params, requiredParams, options);\n\n  let path = replaceRequiredParams(pathSpec, requiredParams, params);\n\n  const { anchor } = options;\n  delete options.anchor;\n\n  path = replaceOptionalParams(path, optionalParams, options);\n\n  path = addQueryStringParams(path, options, anchor);\n\n  return path;\n};\n\nexport { buildPath, matchesRequiredParam, matchesOptionalParam, requiredParamRegex };\n"]}