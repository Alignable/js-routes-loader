{"version":3,"sources":["../src/Route.js"],"names":["Route","path","params","requiredParams","optionalParams","opts","methods","fetchWrapper","options","fetch","method","length","includes","Error","Object","assign"],"mappings":";;;;;;;;AAAA;;;;IAEMA,K;AACJ,iBAAYC,IAAZ,EAAkBC,MAAlB,EAA0BC,cAA1B,EAA0CC,cAA1C,EAA0DC,IAA1D,EAAgEC,OAAhE,EAAyEC,YAAzE,EAAuF;AAAA;;AACrF,SAAKN,IAAL,GAAY,4BAAUA,IAAV,EAAgBC,MAAhB,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,IAAxD,CAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;;;wBAEGC,O,EAAS;AACX,aAAO,KAAKC,KAAL,CAAW,KAAX,EAAkBD,OAAlB,CAAP;AACD;;;yBAEIA,O,EAAS;AACZ,aAAO,KAAKC,KAAL,CAAW,MAAX,EAAmBD,OAAnB,CAAP;AACD;;;wBAEGA,O,EAAS;AACX,aAAO,KAAKC,KAAL,CAAW,KAAX,EAAkBD,OAAlB,CAAP;AACD;;;0BAEKA,O,EAAS;AACb,aAAO,KAAKC,KAAL,CAAW,OAAX,EAAoBD,OAApB,CAAP;AACD;;;4BAEMA,O,EAAS;AACd,aAAO,KAAKC,KAAL,CAAW,QAAX,EAAqBD,OAArB,CAAP;AACD;;;0BAEKE,M,EAAQF,O,EAAS;AACrB,UAAI,KAAKF,OAAL,CAAaK,MAAb,GAAsB,CAAtB,IAA2B,CAAC,KAAKL,OAAL,CAAaM,QAAb,CAAsBF,MAAtB,CAAhC,EAA+D;AAC7D,cAAM,IAAIG,KAAJ,eAAqBH,MAArB,mDAAyE,KAAKJ,OAA9E,OAAN;AACD;AACD,aAAO,KAAKC,YAAL,CAAkB,KAAKN,IAAvB,EAA6Ba,OAAOC,MAAP,CAAc,EAACL,cAAD,EAAd,EAAwBF,OAAxB,CAA7B,CAAP;AACD;;;;;;kBAGYR,K","file":"Route.js","sourcesContent":["import { buildPath } from './PathBuilder';\n\nclass Route {\n  constructor(path, params, requiredParams, optionalParams, opts, methods, fetchWrapper) {\n    this.path = buildPath(path, params, requiredParams, optionalParams, opts);\n    this.methods = methods;\n    this.fetchWrapper = fetchWrapper;\n  }\n\n  get(options) {\n    return this.fetch('GET', options);\n  }\n\n  post(options) {\n    return this.fetch('POST', options);\n  }\n\n  put(options) {\n    return this.fetch('PUT', options);\n  }\n\n  patch(options) {\n    return this.fetch('PATCH', options);\n  }\n\n  delete(options) {\n    return this.fetch('DELETE', options);\n  }\n\n  fetch(method, options) {\n    if (this.methods.length > 0 && !this.methods.includes(method)) {\n      throw new Error(`Method '${method} is not supported. Supported methods are: [${this.methods}]`);\n    }\n    return this.fetchWrapper(this.path, Object.assign({method}, options));\n  }\n}\n\nexport default Route;\n"]}